# -*- coding: utf-8 -*-
"""Cancer_Type_Prediction_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12sTs-LO44TA12G_ekNkAqSDZZvRK4WiE

# ðŸ§¬ Cancer Type Prediction Using Gene Expression Data

This notebook builds a machine learning model to predict cancer types based on gene expression data.
"""

# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

# Step 2: Load sample dataset (You should replace this with your full gene expression dataset)
from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)
y = y.map({0: 'malignant', 1: 'benign'})  # Simulating cancer types
df = X.copy()
df['CancerType'] = y
df.head()

# Step 3: Encode target and scale features
le = LabelEncoder()
df['CancerType'] = le.fit_transform(df['CancerType'])

X = df.drop('CancerType', axis=1)
y = df['CancerType']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 5: Train Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=le.classes_))

# Step 7: Plot Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()